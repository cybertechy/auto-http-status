name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION_MAIN: '20.x'

jobs:
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION_MAIN }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Check for vulnerabilities
      run: npm audit --audit-level=moderate

  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript compilation
      run: npm run build
      
    - name: Run tests
      run: npm test
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports to Codecov
      if: matrix.node-version == env.NODE_VERSION_MAIN
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload coverage to GitHub
      if: matrix.node-version == env.NODE_VERSION_MAIN
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION_MAIN }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Check coverage thresholds
      run: |
        echo "Checking coverage thresholds..."
        # Extract coverage percentages from the output
        COVERAGE_OUTPUT=$(npm run test:coverage --silent 2>&1 || true)
        echo "Coverage Output: $COVERAGE_OUTPUT"
        
        # Check if coverage meets minimum requirements
        if [[ $COVERAGE_OUTPUT == *"All files"* ]]; then
          echo "‚úÖ Coverage report generated successfully"
        else
          echo "‚ùå Coverage report generation failed"
          exit 1
        fi
        
    - name: Verify build outputs
      run: |
        echo "Checking build outputs..."
        ls -la dist/
        if [ ! -f "dist/index.js" ]; then
          echo "‚ùå Main build output missing"
          exit 1
        fi
        if [ ! -f "dist/index.d.ts" ]; then
          echo "‚ùå Type definitions missing"
          exit 1
        fi
        echo "‚úÖ All build outputs present"
        
    - name: Check package size
      run: |
        echo "Checking package size..."
        PACK_SIZE=$(npm pack --dry-run --json | jq -r '.size')
        echo "Package size: $PACK_SIZE bytes"
        # Warn if package is larger than 100KB
        if [ "$PACK_SIZE" -gt 102400 ]; then
          echo "‚ö†Ô∏è  Package size is large (>100KB): $PACK_SIZE bytes"
        else
          echo "‚úÖ Package size is reasonable: $PACK_SIZE bytes"
        fi

  publish-check:
    name: Publish Readiness
    runs-on: ubuntu-latest
    needs: [test, quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION_MAIN }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Check package can be packed
      run: npm pack --dry-run
      
    - name: Verify package contents
      run: |
        echo "üì¶ Package contents:"
        npm pack --dry-run --json | jq -r '.files[].path' | sort
        
    - name: Validate package.json
      run: |
        echo "üìã Validating package.json..."
        # Check required fields
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'description', 'main', 'types', 'license'];
          const missing = required.filter(field => !pkg[field]);
          if (missing.length > 0) {
            console.error('‚ùå Missing required fields:', missing.join(', '));
            process.exit(1);
          }
          console.log('‚úÖ All required package.json fields present');
        "
        
    - name: Test package installation
      run: |
        echo "üß™ Testing package installation..."
        # Create a temporary directory and test installation
        mkdir -p /tmp/test-install
        cd /tmp/test-install
        npm init -y
        npm pack $GITHUB_WORKSPACE
        PACKAGE_NAME=$(ls *.tgz)
        npm install "./$PACKAGE_NAME"
        
        # Test basic import
        node -e "
          try {
            const lib = require('auto-http-status');
            console.log('‚úÖ Package imports successfully');
            console.log('Exported functions:', Object.keys(lib));
          } catch (error) {
            console.error('‚ùå Package import failed:', error.message);
            process.exit(1);
          }
        "

  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION_MAIN }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run performance tests
      run: |
        echo "üöÄ Running performance tests..."
        node -e "
          const { determineStatusCode } = require('./dist/index.js');
          
          console.time('Performance Test');
          
          // Test various scenarios
          const tests = [
            { error: new Error('Not found'), expected: 404 },
            { error: new Error('Unauthorized'), expected: 401 },
            { data: { id: 1 }, expected: 200 },
            { error: { status: 422 }, expected: 422 },
          ];
          
          let iterations = 1000;
          for (let i = 0; i < iterations; i++) {
            tests.forEach(test => {
              determineStatusCode(test.error || test.data);
            });
          }
          
          console.timeEnd('Performance Test');
          console.log(\`‚úÖ Completed \${iterations * tests.length} status code determinations\`);
        "
